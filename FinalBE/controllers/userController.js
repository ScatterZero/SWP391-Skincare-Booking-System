const mongoose = require("mongoose");
const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { check, validationResult } = require("express-validator");
const { sendAdminVerificationEmail, sendOTP } = require("../utils/email");

// ‚úÖ L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng (Ch·ªâ Admin)
const getAllUsers = async (req, res) => {
  try {
    const users = await User.find().select("-password");
    res.json(users);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", err);
    res.status(500).json({ msg: "L·ªói m√°y ch·ªß", error: err.message });
  }
};

// ‚úÖ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID
const getUserById = async (req, res) => {
  try {
    const user = await User.findById(req.params.id).select("-password");
    if (!user) {
      return res.status(404).json({ msg: "Ng∆∞·ªùi d√πng kh√¥ng t√¨m th·∫•y" });
    }
    res.json(user);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", err);
    res.status(500).json({ msg: "L·ªói m√°y ch·ªß", error: err.message });
  }
};

// ‚úÖ T·∫°o ng∆∞·ªùi d√πng m·ªõi (Ch·ªâ Admin)
const createUser = [
  check("username", "T√™n ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng").not().isEmpty(),
  check("email", "Email kh√¥ng h·ª£p l·ªá").isEmail(),
  check("password", "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±").isLength({ min: 8 }),
  check("phone_number", "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá")
    .optional()
    .isMobilePhone(),
  check("gender", "Gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá")
    .optional()
    .isIn(["male", "female", "other"]),
    check("Description", "M√¥ t·∫£ kh√¥ng h·ª£p l·ªá").optional().isString(),
  check("address", "ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá").optional().isString(),

  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
      }

      const {
        username,
        email,
        password,
        role,
        phone_number,
        gender,
        Description,
        address,
        avatar,
      } = req.body;

      let user = await User.findOne({ email });
      if (user) {
        return res.status(400).json({ msg: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
      }

      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash(password, salt);

      user = new User({
        username,
        email,
        password: hashedPassword,
        role: role || "user",
        isVerified: false,
        phone_number,
        gender,
        Description,
        address,
        avatar: avatar || "default-avatar.png",
      });

      await user.save();

      if (["admin", "skincare_staff", "manager", "staff"].includes(role)) {
        // ‚úÖ T·∫°o token x√°c th·ª±c cho Admin v√† Staff
        const verifyToken = jwt.sign(
          { email: user.email },
          process.env.JWT_SECRET,
          { expiresIn: "24h" }
        );

        const verifyLink = `http://localhost:5000/api/auth/auto-verify?token=${verifyToken}`;
        await sendAdminVerificationEmail(email, verifyLink);
      } else {
        // ‚úÖ T·∫°o OTP cho User b√¨nh th∆∞·ªùng
        const otp = Math.floor(100000 + Math.random() * 900000).toString();
        user.otp = otp;
        user.otpExpires = new Date(Date.now() + 5 * 60 * 1000);
        await user.save();
        await sendOTP(email, otp);
      }

      res.status(200).json({
        msg: "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o. Ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c.",
        email,
      });
    } catch (err) {
      console.error("‚ùå L·ªói t·∫°o t√†i kho·∫£n:", err);
      res.status(500).json({ msg: "L·ªói m√°y ch·ªß", error: err.message });
    }
  },
];

// ‚úÖ X√°c th·ª±c Email
const verifyEmail = async (req, res) => {
  try {
    const { token } = req.query;

    if (!token) {
      return res
        .status(400)
        .json({ msg: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ƒë∆∞·ª£c cung c·∫•p" });
    }

    // ‚úÖ Gi·∫£i m√£ token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    let user = await User.findOne({ email: decoded.email });

    if (!user) {
      return res.status(400).json({ msg: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c
    user.isVerified = true;
    await user.save();

    console.log(`‚úÖ Ng∆∞·ªùi d√πng ${user.email} ƒë√£ x√°c th·ª±c th√†nh c√¥ng!`);

    // ‚úÖ Chuy·ªÉn h∆∞·ªõng v·ªÅ trang login
    res.redirect("http://localhost:3000/login");
  } catch (err) {
    console.error("‚ùå L·ªói x√°c th·ª±c email:", err);
    return res
      .status(400)
      .json({ msg: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n", error: err.message });
  }
};


// ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
const updateUser = async (req, res) => {
  const { username, email, role, phone_number, gender, Description, address, avatar, password } =
    req.body;

  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ msg: "Ng∆∞·ªùi d√πng kh√¥ng t√¨m th·∫•y" });
    }

    Object.keys(req.body).forEach((key) => {
      if (req.body[key] !== undefined && key !== "password") {
        user[key] = req.body[key];
      }
    });

    if (password) {
      const salt = await bcrypt.genSalt(10);
      user.password = await bcrypt.hash(password, salt);
    }

    await user.save();
    res.json({ msg: "C·∫≠p nh·∫≠t th√†nh c√¥ng", user });
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t:", err);
    res.status(500).json({ msg: "L·ªói m√°y ch·ªß", error: err.message });
  }
};

// ‚úÖ X√≥a ng∆∞·ªùi d√πng (Ch·ªâ Admin)
const deleteUser = async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({ msg: "ID kh√¥ng h·ª£p l·ªá" });
    }

    const user = await User.findByIdAndDelete(req.params.id);
    if (!user) {
      return res.status(404).json({ msg: "Ng∆∞·ªùi d√πng kh√¥ng t√¨m th·∫•y" });
    }

    res.json({ msg: "Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c x√≥a" });
  } catch (err) {
    console.error("‚ùå L·ªói khi x√≥a ng∆∞·ªùi d√πng:", err);
    res.status(500).json({ msg: "L·ªói m√°y ch·ªß", error: err.message });
  }
};

// üìå L·∫•y danh s√°ch nh√¢n vi√™n c√≥ role "skincare_staff"
const getSkincareStaff = async (req, res) => {
  try {
    const staffList = await User.find({ role: "skincare_staff" }).select(
      "-password"
    );
    if (!staffList.length) {
      return res
        .status(404)
        .json({ msg: "Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n skincare_staff" });
    }

    res.json(staffList);
  } catch (err) {
    console.error("‚ùå L·ªói m√°y ch·ªß khi l·∫•y nh√¢n vi√™n:", err);
    res.status(500).json({ msg: "L·ªói m√°y ch·ªß", error: err.message });
  }
};

// ‚úÖ Xu·∫•t c√°c h√†m
module.exports = {
  getAllUsers,
  getUserById,
  createUser,
  updateUser,
  deleteUser,
  getSkincareStaff,
  verifyEmail,
};