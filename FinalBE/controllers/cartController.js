const Cart = require("../models/cartModel");
const Product = require("../models/Product");
const Voucher = require("../models/Voucher");
const { v4: uuidv4 } = require("uuid");
const { sendOrderConfirmationEmail } = require("../services/emailService"); // üî• Import h√†m g·ª≠i email

// H√†m t·∫°o BookingID ng·∫´u nhi√™n: "BOOK" + 6 s·ªë ng·∫´u nhi√™n
const generateBookingID = () => {
  return `BOOK${Math.floor(100000 + Math.random() * 900000)}`; // V√≠ d·ª•: BOOK123456
};

// H√†m l·∫•y ng√†y hi·ªán t·∫°i ·ªü ƒë·ªãnh d·∫°ng YYYY-MM-DD
const getCurrentDate = () => {
  const today = new Date();
  return today.toISOString().split("T")[0]; // L·∫•y ph·∫ßn YYYY-MM-DD
};

// T·∫°o Cart m·ªõi v·ªõi d·ªØ li·ªáu t·ª´ Product & Voucher
exports.createCart = async (req, res) => {
    try {
        const {
            customerName, customerEmail, customerPhone, notes,
            service_id, startTime, Skincare_staff, discountCode
        } = req.body;

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!service_id || !startTime || !customerName || !customerEmail || !customerPhone) {
            return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
        }

        // T·∫°o BookingID ng·∫´u nhi√™n
        const BookingID = generateBookingID();

        // L·∫•y ng√†y hi·ªán t·∫°i n·∫øu `bookingDate` kh√¥ng ƒë∆∞·ª£c g·ª≠i t·ª´ request
        const bookingDate = getCurrentDate();

        // T√¨m s·∫£n ph·∫©m theo service_id
        const product = await Product.findOne({ service_id }).populate("category", "name");
        if (!product) {
            return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
        }

        // L·∫•y th√¥ng tin s·∫£n ph·∫©m
        const serviceName = product.name;
        const serviceType = product.category.name;
        const duration = product.duration;
        const totalPrice = product.price;

        // T√≠nh endTime t·ª´ startTime + duration
        const [startHour, startMinute] = startTime.split(":").map(Number);
        const totalMinutes = startHour * 60 + startMinute + duration;
        const endHour = Math.floor(totalMinutes / 60);
        const endMinute = totalMinutes % 60;
        const endTime = `${String(endHour).padStart(2, "0")}:${String(endMinute).padStart(2, "0")}`;

        // √Åp d·ª•ng Voucher n·∫øu c√≥
        let discountAmount = 0;
        if (discountCode) {
            const voucher = await Voucher.findOne({ code: discountCode, isActive: true });
            if (voucher && new Date(voucher.expiryDate) > new Date()) {
                discountAmount = (totalPrice * voucher.discountPercentage) / 100;
            }
        }

        // T·∫°o gi·ªè h√†ng m·ªõi
        const newCart = new Cart({
            CartID: uuidv4(),
            BookingID,
            customerName,
            customerEmail,
            customerPhone,
            notes,
            service_id,
            serviceName,
            serviceType,
            bookingDate,
            startTime,
            endTime,
            duration,
            totalPrice: totalPrice - discountAmount,
            currency: "VND",
            discountCode,
            Skincare_staff
        });

        await newCart.save();

        // üî• G·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng
        await sendOrderConfirmationEmail(customerEmail, newCart);

        res.status(201).json({ message: "Cart ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!", cart: newCart });

    } catch (error) {
        res.status(500).json({ message: "L·ªói t·∫°o Cart!", error });
    }
};


// L·∫•y danh s√°ch Cart
exports.getAllCarts = async (req, res) => {
  try {
    const carts = await Cart.find();
    res.status(200).json(carts);
  } catch (error) {
    res.status(500).json({ message: "L·ªói l·∫•y danh s√°ch Cart!", error });
  }
};

// üîπ L·∫•y Cart theo `CartID`
exports.getCartById = async (req, res) => {
  try {
    const { cartID } = req.params;
    const cart = await Cart.findOne({ CartID: cartID });
    if (!cart) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y Cart!" });
    res.status(200).json(cart);
  } catch (error) {
    res.status(500).json({ message: "L·ªói l·∫•y Cart!", error });
  }
};

// üîπ X√≥a Cart theo `CartID`
exports.deleteCart = async (req, res) => {
  try {
    const { cartID } = req.params;
    const deletedCart = await Cart.findOneAndDelete({ CartID: cartID });
    if (!deletedCart) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y Cart!" });
    }
    res.status(200).json({ message: "Cart ƒë√£ ƒë∆∞·ª£c x√≥a!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói x√≥a Cart!", error });
  }
};

// üîπ C·∫≠p nh·∫≠t Cart theo `CartID`
exports.updateCart = async (req, res) => {
  try {
    const { cartID } = req.params;
    const updateData = req.body;

    // T√¨m gi·ªè h√†ng theo CartID
    let cart = await Cart.findOne({ CartID: cartID });
    if (!cart) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y Cart!" });
    }

    // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng n·∫øu c√≥ trong request body
    Object.assign(cart, updateData);

    // N·∫øu c√≥ thay ƒë·ªïi startTime, t√≠nh to√°n l·∫°i endTime
    if (updateData.startTime && cart.duration) {
      const [startHour, startMinute] = updateData.startTime
        .split(":")
        .map(Number);
      const totalMinutes = startHour * 60 + startMinute + cart.duration;
      const endHour = Math.floor(totalMinutes / 60);
      const endMinute = totalMinutes % 60;
      cart.endTime = `${String(endHour).padStart(2, "0")}:${String(
        endMinute
      ).padStart(2, "0")}`;
    }

    await cart.save();
    res.status(200).json({ message: "Cart ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!", cart });
  } catch (error) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t Cart!", error });
  }
};
// ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i gi·ªè h√†ng th√†nh "Cancel"
exports.cancelCart = async (req, res) => {
  try {
    const { cartID } = req.params; // L·∫•y CartID t·ª´ URL

    // T√¨m gi·ªè h√†ng theo CartID
    const cart = await Cart.findOne({ CartID: cartID });
    if (!cart) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y Cart!" });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh "Cancel"
    cart.Status = "Cancel";
    await cart.save();

    res.status(200).json({ message: "Cart ƒë√£ b·ªã h·ªßy!", cart });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi h·ªßy Cart!", error });
  }
};
