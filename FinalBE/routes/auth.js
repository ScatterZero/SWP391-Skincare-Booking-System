const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { check, validationResult } = require("express-validator");
const User = require("../models/User");
const router = express.Router();
const { sendOTP } = require("../utils/email");
const { sendResetPasswordOTP } = require("../utils/email");
const { sendAdminVerificationEmail } = require("../utils/email");
const multer = require("multer");
const path = require("path");
const fs = require("fs");
// C·∫•u h√¨nh Multer ƒë·ªÉ l∆∞u v√†o th∆∞ m·ª•c ƒë·ªông
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const userId = req.user.id; // L·∫•y user ID t·ª´ token
    const folderPath = `uploads/users/${userId}/`; // T·∫°o th∆∞ m·ª•c ri√™ng cho m·ªói user

    // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
    fs.mkdirSync(folderPath, { recursive: true });

    cb(null, folderPath);
  },
  filename: function (req, file, cb) {
    cb(null, "avatar" + path.extname(file.originalname)); // L∆∞u v·ªõi t√™n c·ªë ƒë·ªãnh
  },
});

// Kh·ªüi t·∫°o Multer
const upload = multer({
  storage: storage,
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith("image/")) {
      cb(null, true);
    } else {
      cb(new Error("Ch·ªâ cho ph√©p t·∫£i l√™n file ·∫£nh!"), false);
    }
  },
  limits: { fileSize: 10 * 1024 * 1024 }, // Gi·ªõi h·∫°n 10MB
});

//ƒêƒÉng k√Ω t√†i kho·∫£n
router.post(
  "/register",
  [
    check("username", "T√™n ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng").not().isEmpty(),
    check("email", "Email kh√¥ng h·ª£p l·ªá").isEmail(),
    check("password", "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±").isLength({ min: 8 }),
    check("phone_number", "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá")
      .optional()
      .isMobilePhone(),
    check("gender", "Gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá")
      .optional()
      .isIn(["male", "female", "other"]),
    check("address", "ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá").optional().isString(),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const {
      username,
      email,
      password,
      role,
      phone_number,
      gender,
      address,
      avatar,
    } = req.body;

    try {
      let user = await User.findOne({ email });
      if (user) {
        return res.status(400).json({ msg: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
      }

      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash(password, salt);

      user = new User({
        username,
        email,
        password: hashedPassword,
        role: role || "user",
        isVerified: false,
        phone_number,
        gender,
        address,
        avatar: avatar || "default-avatar.png",
      });

      await user.save();

      if (["admin", "skincare_staff", "manager", "staff"].includes(role)) {
        const verifyToken = jwt.sign(
          { email: user.email },
          process.env.JWT_SECRET,
          { expiresIn: "24h" }
        );

        const verifyLink = `http://localhost:5000/api/auth/auto-verify?token=${verifyToken}`;
        await sendAdminVerificationEmail(email, verifyLink);
      } else {
        const otp = Math.floor(100000 + Math.random() * 900000).toString();
        user.otp = otp;
        user.otpExpires = new Date(Date.now() + 5 * 60 * 1000);
        await user.save();
        await sendOTP(email, otp);
      }

      res.status(200).json({
        msg: "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o. Ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c.",
        email,
      });
    } catch (err) {
      console.error(err.message);
      res.status(500).send("L·ªói m√°y ch·ªß");
    }
  }
);

// X√°c th·ª±c m√£ OTP
router.post(
  "/verify-otp",
  [
    check("email", "Email kh√¥ng h·ª£p l·ªá").isEmail(),
    check("otp", "OTP kh√¥ng h·ª£p l·ªá").isLength({ min: 6, max: 6 }),
  ],
  async (req, res) => {
    const { email, otp } = req.body;

    try {
      let user = await User.findOne({ email });

      if (!user || user.otp !== otp || user.otpExpires < new Date()) {
        return res
          .status(400)
          .json({ msg: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n l√† ƒë√£ x√°c th·ª±c
      user.isVerified = true;
      await user.save();

      res.status(200).json({
        msg: "X√°c th·ª±c th√†nh c√¥ng, b·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p!",
        otp: user.otp, // Lu√¥n tr·∫£ v·ªÅ OTP sau khi x√°c th·ª±c
        otpExpires: user.otpExpires, // Hi·ªÉn th·ªã th·ªùi gian h·∫øt h·∫°n
      });
    } catch (err) {
      console.error(err.message);
      res.status(500).send("L·ªói m√°y ch·ªß");
    }
  }
);

// ƒêƒÉng nh·∫≠p t√†i kho·∫£n
router.post(
  "/login",
  [
    check("email", "Email kh√¥ng h·ª£p l·ªá").isEmail(),
    check("password", "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u").exists(),
  ],
  async (req, res) => {
    const { email, password } = req.body;

    try {
      let user = await User.findOne({ email });
      if (!user) {
        return res.status(400).json({ msg: "Sai email ho·∫∑c m·∫≠t kh·∫©u" });
      }

      if (!user.isVerified) {
        return res.status(400).json({ msg: "Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c!" });
      }

      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        return res.status(400).json({ msg: "Sai email ho·∫∑c m·∫≠t kh·∫©u" });
      }

      const payload = {
        user: {
          id: user.id,
          username: user.username,
          role: user.role,
        },
      };

      // üî• T·∫°o token
      const token = jwt.sign(payload, process.env.JWT_SECRET, {
        expiresIn: "1h",
      });

      // üî• L∆∞u token v√†o DB
      user.token = token;
      await user.save();

      res.json({ token, username: user.username, role: user.role });
    } catch (err) {
      console.error(err.message);
      res.status(500).send("L·ªói m√°y ch·ªß");
    }
  }
);

const authMiddleware = (req, res, next) => {
  const token = req.header("x-auth-token");
  if (!token) {
    return res.status(401).json({ msg: "Kh√¥ng c√≥ token, truy c·∫≠p b·ªã t·ª´ ch·ªëi" });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded.user;
    next();
  } catch (err) {
    res.status(401).json({ msg: "Token kh√¥ng h·ª£p l·ªá" });
  }
};

const authorize = (roles = []) => {
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ msg: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p" });
    }
    next();
  };
};

router.get("/admin", authMiddleware, authorize(["admin"]), (req, res) => {
  res.json({ msg: "Ch√†o m·ª´ng Admin" });
});

router.get(
  "/moderator",
  authMiddleware,
  authorize(["admin", "moderator"]),
  (req, res) => {
    res.json({ msg: "Ch√†o m·ª´ng Moderator" });
  }
);

router.get("/me", authMiddleware, async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select("-password");
    res.json({
      username: user.username,
      email: user.email,
      role: user.role,
      avatar: user.avatar,
    });
  } catch (err) {
    console.error(err.message);
    res.status(500).send("L·ªói m√°y ch·ªß");
  }
});

// C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
router.put(
  "/update-profile",
  authMiddleware,
  upload.single("avatar"),
  async (req, res) => {
    try {
      let user = await User.findById(req.user.id);
      if (!user) {
        return res.status(404).json({ msg: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
      }

      const { username, email } = req.body;
      let avatarPath = user.avatar;

      // N·∫øu c√≥ file m·ªõi t·∫£i l√™n th√¨ c·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n
      if (req.file) {
        avatarPath = `/uploads/users/${req.user.id}/${req.file.filename}`;
      }

      if (username) user.username = username;
      if (email) user.email = email;
      user.avatar = avatarPath; // C·∫≠p nh·∫≠t avatar v√†o database

      await user.save();

      res.status(200).json({
        msg: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
        user: {
          username: user.username,
          email: user.email,
          avatar: avatarPath,
        },
      });
    } catch (err) {
      console.error("L·ªói Backend:", err);
      res.status(500).json({ msg: "L·ªói m√°y ch·ªß!", error: err.message });
    }
  }
);

router.post(
  "/forgot-password",
  [
    check("email", "Email kh√¥ng h·ª£p l·ªá").isEmail(),
    check("old_password", "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng").not().isEmpty(),
    check("new_password", "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±").isLength({
      min: 8,
    }),
  ],
  async (req, res) => {
    const { email, old_password, new_password } = req.body;

    try {
      let user = await User.findOne({ email });

      if (!user) {
        return res.status(400).json({ msg: "Email kh√¥ng t·ªìn t·∫°i" });
      }

      // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
      const isMatch = await bcrypt.compare(old_password, user.password);
      if (!isMatch) {
        return res.status(400).json({ msg: "M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c" });
      }

      // BƒÉm m·∫≠t kh·∫©u m·ªõi
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash(new_password, salt);

      // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
      user.password = hashedPassword;
      await user.save();

      res.status(200).json({ msg: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng" });
    } catch (err) {
      console.error(err.message);
      res.status(500).send("L·ªói m√°y ch·ªß");
    }
  }
);

router.post(
  "/forgot-password/send-otp",
  [check("email", "Email kh√¥ng h·ª£p l·ªá").isEmail()],
  async (req, res) => {
    const { email } = req.body;

    try {
      let user = await User.findOne({ email });
      if (!user) {
        return res.status(400).json({ msg: "Email kh√¥ng t·ªìn t·∫°i" });
      }

      // T·∫°o m√£ OTP ng·∫´u nhi√™n (6 s·ªë)
      const otp = Math.floor(100000 + Math.random() * 900000).toString();
      const otpExpires = new Date(Date.now() + 5 * 60 * 1000); // H·∫øt h·∫°n sau 5 ph√∫t

      // L∆∞u OTP v√†o database
      user.otp = otp;
      user.otpExpires = otpExpires;
      await user.save();

      // G·ª≠i OTP Reset Password
      await sendResetPasswordOTP(email, otp);

      res.status(200).json({
        msg: "M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n.",
      });
    } catch (err) {
      console.error(err.message);
      res.status(500).send("L·ªói m√°y ch·ªß");
    }
  }
);

router.post(
  "/forgot-password/reset",
  [
    check("email", "Email kh√¥ng h·ª£p l·ªá").isEmail(),
    check("otp", "OTP kh√¥ng h·ª£p l·ªá").isLength({ min: 6, max: 6 }),
    check("new_password", "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±").isLength({
      min: 8,
    }),
    check("confirm_password", "X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp").custom(
      (value, { req }) => value === req.body.new_password
    ),
  ],
  async (req, res) => {
    const { email, otp, new_password, confirm_password } = req.body;

    try {
      let user = await User.findOne({ email });

      if (!user) {
        return res.status(400).json({ msg: "Email kh√¥ng t·ªìn t·∫°i" });
      }

      // Ki·ªÉm tra n·∫øu OTP kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng
      if (!user.otp || user.otp !== otp || user.otpExpires < new Date()) {
        return res
          .status(400)
          .json({ msg: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
      }

      // BƒÉm m·∫≠t kh·∫©u m·ªõi
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash(new_password, salt);

      // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi v√† X√ìA OTP
      user.password = hashedPassword;
      user.otp = null; // X√≥a OTP ƒë·ªÉ kh√¥ng th·ªÉ s·ª≠ d·ª•ng l·∫°i
      user.otpExpires = null; // X√≥a th·ªùi gian h·∫øt h·∫°n OTP
      await user.save();

      res.status(200).json({ msg: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!" });
    } catch (err) {
      console.error("L·ªói Backend:", err.message);
      res.status(500).send("L·ªói m√°y ch·ªß");
    }
  }
);

router.get("/auto-verify", async (req, res) => {
  const { token } = req.query;

  if (!token) {
    return res
      .status(400)
      .json({ msg: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ƒë∆∞·ª£c cung c·∫•p" });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    let user = await User.findOne({ email: decoded.email });

    if (!user) {
      return res.status(400).json({ msg: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    user.isVerified = true;
    await user.save();

    res.redirect("http://localhost:3000/login");
  } catch (err) {
    console.error(err);
    return res.status(400).json({ msg: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
  }
});

module.exports = router;
